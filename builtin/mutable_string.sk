INITIAL_STR_CAPA = 10

class MutableString
  def initialize
    var @ptr = Shiika::Internal::Memory.gc_malloc(INITIAL_STR_CAPA+1)
    # Maximum number of bytes (does not included the last null)
    var @capa = INITIAL_STR_CAPA
    var @bytesize = 0
  end

  def append(other: String) -> Void
    new_bytesize = @bytesize + other.bytesize
    if @capa < new_bytesize
      @ptr = Shiika::Internal::Memory.gc_realloc(@ptr, new_bytesize+1)
      @capa = new_bytesize
    end
    Shiika::Internal::Memory.memcpy(@ptr + @bytesize, other.ptr, other.bytesize)
    @bytesize = new_bytesize
  end

  # Create a immutable clone of self. The contents of the returned string will not change
  # even if this object is dectructively modified.
  def to_s -> String
    newptr = Shiika::Internal::Memory.gc_malloc(@bytesize + 1)
    Shiika::Internal::Memory.memcpy(newptr, @ptr, @bytesize)
    String.new(newptr, @bytesize)
  end

  # Create a immutable version of self without copying memory.
  # Unsafe unless the original immediately gets GC'd
  def _unsafe_to_s -> String
    String.new(@ptr, @bytesize)
  end
end
